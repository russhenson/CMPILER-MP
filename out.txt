program : RESERVED
sample : IDENTIFIER
; : SEMICOLON
var : RESERVED
value : IDENTIFIER
, : COMMA
nextValue : IDENTIFIER
: : COLON
real : PREDECLARED
; : SEMICOLON
y : IDENTIFIER
: : COLON
boolean : PREDECLARED
; : SEMICOLON
z : IDENTIFIER
, : COMMA
p : IDENTIFIER
, : COMMA
input : IDENTIFIER
: : COLON
integer : PREDECLARED
; : SEMICOLON
function : RESERVED
testOne : IDENTIFIER
( : LPAREN
) : RPAREN
: : COLON
void : PREDECLARED
var : RESERVED
x : IDENTIFIER
, : COMMA
i : IDENTIFIER
: : COLON
integer : PREDECLARED
; : SEMICOLON
begin : RESERVED
readln : PREDECLARED
( : LPAREN
'Hello. I need your number: ' : STRING
, : COMMA
x : IDENTIFIER
) : RPAREN
; : SEMICOLON
for : RESERVED
i : IDENTIFIER
:= : ASSIGN
0 : INTEGER
to : RESERVED
10 : INTEGER
do : RESERVED
begin : RESERVED
writeln : PREDECLARED
( : LPAREN
'Yes ' : STRING
, : COMMA
x : IDENTIFIER
) : RPAREN
; : SEMICOLON
end : RESERVED
; : SEMICOLON
x : IDENTIFIER
:= : ASSIGN
5 : INTEGER
; : SEMICOLON
end : RESERVED
; : SEMICOLON
function : RESERVED
testTwo : IDENTIFIER
( : LPAREN
x : IDENTIFIER
: : COLON
real : PREDECLARED
) : RPAREN
: : COLON
void : PREDECLARED
begin : RESERVED
if : RESERVED
( : LPAREN
x : IDENTIFIER
> : RELATIONAL
4 : INTEGER
) : RPAREN
then : RESERVED
begin : RESERVED
writeln : PREDECLARED
( : LPAREN
x : IDENTIFIER
, : COMMA
' is a very huge number' : STRING
) : RPAREN
; : SEMICOLON
end : RESERVED
; : SEMICOLON
end : RESERVED
; : SEMICOLON
function : RESERVED
testThree : IDENTIFIER
( : LPAREN
x : IDENTIFIER
, : COMMA
y : IDENTIFIER
: : COLON
integer : PREDECLARED
) : RPAREN
: : COLON
void : PREDECLARED
var : RESERVED
i : IDENTIFIER
: : COLON
integer : PREDECLARED
; : SEMICOLON
begin : RESERVED
for : RESERVED
i : IDENTIFIER
:= : ASSIGN
0 : INTEGER
to : RESERVED
x : IDENTIFIER
do : RESERVED
begin : RESERVED
writeln : PREDECLARED
( : LPAREN
'loop ' : STRING
, : COMMA
i : IDENTIFIER
, : COMMA
'-> ' : STRING
, : COMMA
y : IDENTIFIER
) : RPAREN
; : SEMICOLON
end : RESERVED
; : SEMICOLON
end : RESERVED
; : SEMICOLON
function : RESERVED
testFour : IDENTIFIER
( : LPAREN
x : IDENTIFIER
: : COLON
integer : PREDECLARED
; : SEMICOLON
y : IDENTIFIER
: : COLON
integer : PREDECLARED
; : SEMICOLON
z : IDENTIFIER
: : COLON
integer : PREDECLARED
) : RPAREN
: : COLON
void : PREDECLARED
var : RESERVED
sum : IDENTIFIER
: : COLON
integer : PREDECLARED
; : SEMICOLON
begin : RESERVED
sum : IDENTIFIER
:= : ASSIGN
x : IDENTIFIER
+ : ARITHMETIC
y : IDENTIFIER
+ : ARITHMETIC
z : IDENTIFIER
; : SEMICOLON
writeln : PREDECLARED
( : LPAREN
'SUM = ' : STRING
, : COMMA
sum : IDENTIFIER
) : RPAREN
; : SEMICOLON
end : RESERVED
; : SEMICOLON
function : RESERVED
testFive : IDENTIFIER
( : LPAREN
) : RPAREN
: : COLON
void : PREDECLARED
begin : RESERVED
writeln : PREDECLARED
( : LPAREN
'Hello' : STRING
) : RPAREN
; : SEMICOLON
end : RESERVED
; : SEMICOLON
begin : RESERVED
value : IDENTIFIER
:= : ASSIGN
( : LPAREN
5 : INTEGER
* : ARITHMETIC
1 : INTEGER
) : RPAREN
+ : ARITHMETIC
( : LPAREN
5 : INTEGER
* : ARITHMETIC
5 : INTEGER
/ : ARITHMETIC
1 : INTEGER
+ : ARITHMETIC
3 : INTEGER
+ : ARITHMETIC
( : LPAREN
4 : INTEGER
+ : ARITHMETIC
( : LPAREN
5 : INTEGER
* : ARITHMETIC
3 : INTEGER
) : RPAREN
) : RPAREN
) : RPAREN
/ : ARITHMETIC
2.0 : REAL
* : ARITHMETIC
8.0 : REAL
; : SEMICOLON
testOne : IDENTIFIER
( : LPAREN
) : RPAREN
; : SEMICOLON
testTwo : IDENTIFIER
( : LPAREN
value : IDENTIFIER
) : RPAREN
; : SEMICOLON
nextValue : IDENTIFIER
:= : ASSIGN
5 : INTEGER
* : ARITHMETIC
5 : INTEGER
+ : ARITHMETIC
5 : INTEGER
+ : ARITHMETIC
5 : INTEGER
* : ARITHMETIC
5 : INTEGER
; : SEMICOLON
testTwo : IDENTIFIER
( : LPAREN
nextValue : IDENTIFIER
) : RPAREN
; : SEMICOLON
testTwo : IDENTIFIER
( : LPAREN
2.0 : REAL
) : RPAREN
; : SEMICOLON
testThree : IDENTIFIER
( : LPAREN
5 : INTEGER
, : COMMA
13 : INTEGER
) : RPAREN
; : SEMICOLON
testThree : IDENTIFIER
( : LPAREN
2 : INTEGER
* : ARITHMETIC
2 : INTEGER
, : COMMA
54 : INTEGER
* : ARITHMETIC
5 : INTEGER
) : RPAREN
; : SEMICOLON
testThree : IDENTIFIER
( : LPAREN
4 : INTEGER
, : COMMA
5 : INTEGER
) : RPAREN
; : SEMICOLON
testFour : IDENTIFIER
( : LPAREN
1 : INTEGER
, : COMMA
2 : INTEGER
, : COMMA
4 : INTEGER
) : RPAREN
; : SEMICOLON
testFive : IDENTIFIER
( : LPAREN
) : RPAREN
; : SEMICOLON
end : RESERVED
. : DOT
